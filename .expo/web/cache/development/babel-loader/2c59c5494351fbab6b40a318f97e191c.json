{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Notifications from 'expo-notifications';\n\nvar RegisterNotification = function RegisterNotification() {\n  var _await$Notifications$, status, _await$Notifications$2, _status, token;\n\n  return _regeneratorRuntime.async(function RegisterNotification$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 2:\n          _await$Notifications$ = _context.sent;\n          status = _await$Notifications$.status;\n\n          if (!(status !== 'granted')) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 7:\n          _await$Notifications$2 = _context.sent;\n          _status = _await$Notifications$2.status;\n\n          if (!(_status !== 'granted')) {\n            _context.next = 12;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context.abrupt(\"return\");\n\n        case 12:\n          _context.next = 14;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 14:\n          token = _context.sent.data;\n\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          console.log(token);\n          return _context.abrupt(\"return\", token);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default RegisterNotification;","map":{"version":3,"sources":["D:/VITA/School/Android/garbage-app-react-native/notification/RegisterNotification.js"],"names":["Notifications","RegisterNotification","getPermissionsAsync","status","requestPermissionsAsync","alert","getExpoPushTokenAsync","token","data","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","console","log"],"mappings":";AAAA,OAAO,KAAKA,aAAZ,MAA+B,oBAA/B;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACGD,aAAa,CAACE,mBAAd,EADH;;AAAA;AAAA;AACfC,UAAAA,MADe,yBACfA,MADe;;AAAA,gBAGnBA,MAAM,KAAK,SAHQ;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAIIH,aAAa,CAACI,uBAAd,EAJJ;;AAAA;AAAA;AAIbD,UAAAA,OAJa,0BAIbA,MAJa;;AAAA,gBAKjBA,OAAM,KAAK,SALM;AAAA;AAAA;AAAA;;AAMjBE,UAAAA,KAAK,CAAC,iDAAD,CAAL;AANiB;;AAAA;AAAA;AAAA,2CAaFL,aAAa,CAACM,qBAAd,EAbE;;AAAA;AAajBC,UAAAA,KAbiB,iBAaqCC,IAbrC;;AAevB,cAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7BV,YAAAA,aAAa,CAACW,2BAAd,CAA0C,SAA1C,EAAqD;AACnDC,cAAAA,IAAI,EAAE,SAD6C;AAEnDC,cAAAA,UAAU,EAAEb,aAAa,CAACc,iBAAd,CAAgCC,GAFO;AAGnDC,cAAAA,gBAAgB,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd,CAHiC;AAInDC,cAAAA,UAAU,EAAE;AAJuC,aAArD;AAMD;;AAEDC,UAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AAxBuB,2CAyBhBA,KAzBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA7B;;AA6BA,eAAeN,oBAAf","sourcesContent":["import * as Notifications from 'expo-notifications';\r\n\r\nconst RegisterNotification = async () => {\r\n      const { status }  = await Notifications.getPermissionsAsync();\r\n\r\n      if (status !== 'granted') {\r\n        const { status } = await Notifications.requestPermissionsAsync();\r\n        if (status !== 'granted') {\r\n            alert('Failed to get push token for push notification!');\r\n            return;\r\n          }\r\n      }\r\n\r\n      \r\n\r\n      const token = (await Notifications.getExpoPushTokenAsync()).data;\r\n\r\n      if (Platform.OS === 'android') {\r\n        Notifications.setNotificationChannelAsync('default', {\r\n          name: 'default',\r\n          importance: Notifications.AndroidImportance.MAX,\r\n          vibrationPattern: [0, 250, 250, 250],\r\n          lightColor: '#FF231F7C',\r\n        });\r\n      }\r\n\r\n      console.log(token)\r\n      return token;\r\n      \r\n};\r\n\r\nexport default RegisterNotification;"]},"metadata":{},"sourceType":"module"}